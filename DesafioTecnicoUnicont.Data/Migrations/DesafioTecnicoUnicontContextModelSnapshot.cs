// <auto-generated />
using System;
using DesafioTecnicoUnicont.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioTecnicoUnicont.Data.Migrations
{
    [DbContext(typeof(DesafioTecnicoUnicontContext))]
    partial class DesafioTecnicoUnicontContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.NotaFiscal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("datetime2")
                        .HasColumnName("DATAEMISSAO");

                    b.Property<int>("IdPrestador")
                        .HasColumnType("int");

                    b.Property<int>("IdServico")
                        .HasColumnType("int");

                    b.Property<int>("IdTomador")
                        .HasColumnType("int");

                    b.Property<string>("NumeroNota")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NUMNOTA");

                    b.HasKey("Id");

                    b.HasIndex("IdPrestador");

                    b.HasIndex("IdServico")
                        .IsUnique();

                    b.HasIndex("IdTomador");

                    b.ToTable("NOTAFISCAL", (string)null);
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Prestador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("CNPJ");

                    b.HasKey("Id")
                        .HasName("PK_PRESTADOR");

                    b.ToTable("PRESTADOR", (string)null);
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("DESCRICAO");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("VALOR");

                    b.HasKey("Id")
                        .HasName("PK_SERVICO");

                    b.ToTable("SERVICO", (string)null);
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Tomador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("CNPJ");

                    b.HasKey("Id")
                        .HasName("PK_TOMADOR");

                    b.ToTable("TOMADOR", (string)null);
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.NotaFiscal", b =>
                {
                    b.HasOne("DesafioTecnicoUnicont.Domain.Entity.Prestador", "Prestador")
                        .WithMany("NotasFiscais")
                        .HasForeignKey("IdPrestador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NOTA_PRESTADOR");

                    b.HasOne("DesafioTecnicoUnicont.Domain.Entity.Servico", "Servico")
                        .WithOne("NotaFiscal")
                        .HasForeignKey("DesafioTecnicoUnicont.Domain.Entity.NotaFiscal", "IdServico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NOTA_SERVICO");

                    b.HasOne("DesafioTecnicoUnicont.Domain.Entity.Tomador", "Tomador")
                        .WithMany("NotasFiscais")
                        .HasForeignKey("IdTomador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NOTA_TOMADOR");

                    b.Navigation("Prestador");

                    b.Navigation("Servico");

                    b.Navigation("Tomador");
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Prestador", b =>
                {
                    b.Navigation("NotasFiscais");
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Servico", b =>
                {
                    b.Navigation("NotaFiscal")
                        .IsRequired();
                });

            modelBuilder.Entity("DesafioTecnicoUnicont.Domain.Entity.Tomador", b =>
                {
                    b.Navigation("NotasFiscais");
                });
#pragma warning restore 612, 618
        }
    }
}
